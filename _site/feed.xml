<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-08T21:54:26-05:00</updated><id>http://localhost:4000/</id><title type="html">GWCC</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Super Heroes</title><link href="http://localhost:4000/highlights/super-heroes/" rel="alternate" type="text/html" title="Super Heroes" /><published>2018-01-22T00:00:00-05:00</published><updated>2018-01-22T00:00:00-05:00</updated><id>http://localhost:4000/highlights/super-heroes</id><content type="html" xml:base="http://localhost:4000/highlights/super-heroes/">&lt;div class=&quot;highlight_video discover_overlay&quot; style=&quot;background-image:url('/assets/img/highlights_podcast.jpg');&quot;&gt;
    &lt;div class=&quot;frow centered&quot;&gt;
        &lt;div&gt;

            &lt;!-- Vimeo onClick --&gt;
            &lt;div class=&quot;gwcc_video_overlay&quot;&gt;
                &lt;div class=&quot;gwcc-video-container&quot;&gt;

                    &lt;!-- SVG Close (X) Icon --&gt;
                    &lt;svg class=&quot;gwcc_close&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;39.2 22.3 25 24.5&quot;&gt;&lt;path d=&quot;M39.5,46.4c0.2,0.2,0.6,0.4,0.9,0.4c0.3,0,0.6-0.1,0.9-0.4l10.3-10.3L62,46.4c0.2,0.2,0.6,0.4,0.9,0.4c0.3,0,0.6-0.1,0.9-0.4c0.5-0.5,0.5-1.3,0-1.8L53.5,34.3l9.8-9.8c0.5-0.5,0.5-1.3,0-1.8c-0.5-0.5-1.3-0.5-1.8,0l-9.8,9.8l-9.8-9.8c-0.5-0.5-1.3-0.5-1.8,0c-0.5,0.5-0.5,1.3,0,1.8l9.8,9.8L39.5,44.6C39,45.1,39,45.9,39.5,46.4z&quot; /&gt;&lt;/svg&gt;


                    &lt;!-- Embedded video --&gt;
                    &lt;iframe id=&quot;video&quot; src=&quot;https://player.vimeo.com/video/242342417?api=1&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&quot;gwcc_video_player&quot;&gt;
                &lt;div&gt;
                    &lt;span class=&quot;gwcc_play&quot;&gt;+ Play&lt;/span&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;!-- &lt;div class=&quot;bronzey_alpha&quot;&gt;
                Peek Inside GWCC
            &lt;/div&gt; --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
      // Scroll to the very bottom to see the stuff we wrote, the big giant blocks are:
      // froogaloop
      // and
      // fitvid.js

      ;(function( $ ){

        'use strict';

        $.fn.fitVids = function( options ) {
          var settings = {
            customSelector: null,
            ignore: null
          };

          if(!document.getElementById('fit-vids-style')) {
            // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
            var head = document.head || document.getElementsByTagName('head')[0];
            var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
            var div = document.createElement(&quot;div&quot;);
            div.innerHTML = '&lt;p&gt;x&lt;/p&gt;&lt;style id=&quot;fit-vids-style&quot;&gt;' + css + '&lt;/style&gt;';
            head.appendChild(div.childNodes[1]);
          }

          if ( options ) {
            $.extend( settings, options );
          }

          return this.each(function(){
            var selectors = [
              'iframe[src*=&quot;player.vimeo.com&quot;]',
              'iframe[src*=&quot;youtube.com&quot;]',
              'iframe[src*=&quot;youtube-nocookie.com&quot;]',
              'iframe[src*=&quot;kickstarter.com&quot;][src*=&quot;video.html&quot;]',
              'object',
              'embed'
            ];

            if (settings.customSelector) {
              selectors.push(settings.customSelector);
            }

            var ignoreList = '.fitvidsignore';

            if(settings.ignore) {
              ignoreList = ignoreList + ', ' + settings.ignore;
            }

            var $allVideos = $(this).find(selectors.join(','));
            $allVideos = $allVideos.not('object object'); // SwfObj conflict patch
            $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.

            $allVideos.each(function(count){
              var $this = $(this);
              if($this.parents(ignoreList).length &gt; 0) {
                return; // Disable FitVids on this video.
              }
              if (this.tagName.toLowerCase() === 'embed' &amp;&amp; $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }
              if ((!$this.css('height') &amp;&amp; !$this.css('width')) &amp;&amp; (isNaN($this.attr('height')) || isNaN($this.attr('width'))))
              {
                $this.attr('height', 9);
                $this.attr('width', 16);
              }
              var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') &amp;&amp; !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),
                  width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
                  aspectRatio = height / width;
              if(!$this.attr('id')){
                var videoID = 'fitvid' + count;
                $this.attr('id', videoID);
              }
              $this.wrap('&lt;div class=&quot;fluid-width-video-wrapper&quot;&gt;&lt;/div&gt;').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');
              $this.removeAttr('height').removeAttr('width');
            });
          });
        };
      // Works with either jQuery or Zepto
      })( window.jQuery || window.Zepto );

      // Init style shamelessly stolen from jQuery http://jquery.com
      var Froogaloop = (function(){
          // Define a local copy of Froogaloop
          function Froogaloop(iframe) {
              // The Froogaloop object is actually just the init constructor
              return new Froogaloop.fn.init(iframe);
          }

          var eventCallbacks = {},
              hasWindowEvent = false,
              isReady = false,
              slice = Array.prototype.slice,
              playerDomain = '';

          Froogaloop.fn = Froogaloop.prototype = {
              element: null,

              init: function(iframe) {
                  if (typeof iframe === &quot;string&quot;) {
                      iframe = document.getElementById(iframe);
                  }

                  this.element = iframe;

                  // Register message event listeners
                  playerDomain = getDomainFromUrl(this.element.getAttribute('src'));

                  return this;
              },

              /*
               * Calls a function to act upon the player.
               *
               * @param {string} method The name of the Javascript API method to call. Eg: 'play'.
               * @param {Array|Function} valueOrCallback params Array of parameters to pass when calling an API method
               *                                or callback function when the method returns a value.
               */
              api: function(method, valueOrCallback) {
                  if (!this.element || !method) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null,
                      params = !isFunction(valueOrCallback) ? valueOrCallback : null,
                      callback = isFunction(valueOrCallback) ? valueOrCallback : null;

                  // Store the callback for get functions
                  if (callback) {
                      storeCallback(method, callback, target_id);
                  }

                  postMessage(method, params, element);
                  return self;
              },

              /*
               * Registers an event listener and a callback function that gets called when the event fires.
               *
               * @param eventName (String): Name of the event to listen for.
               * @param callback (Function): Function that should be called when the event fires.
               */
              addEvent: function(eventName, callback) {
                  if (!this.element) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null;


                  storeCallback(eventName, callback, target_id);

                  // The ready event is not registered via postMessage. It fires regardless.
                  if (eventName != 'ready') {
                      postMessage('addEventListener', eventName, element);
                  }
                  else if (eventName == 'ready' &amp;&amp; isReady) {
                      callback.call(null, target_id);
                  }

                  return self;
              },

              /*
               * Unregisters an event listener that gets called when the event fires.
               *
               * @param eventName (String): Name of the event to stop listening for.
               */
              removeEvent: function(eventName) {
                  if (!this.element) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null,
                      removed = removeCallback(eventName, target_id);

                  // The ready event is not registered
                  if (eventName != 'ready' &amp;&amp; removed) {
                      postMessage('removeEventListener', eventName, element);
                  }
              }
          };

          /**
           * Handles posting a message to the parent window.
           *
           * @param method (String): name of the method to call inside the player. For api calls
           * this is the name of the api method (api_play or api_pause) while for events this method
           * is api_addEventListener.
           * @param params (Object or Array): List of parameters to submit to the method. Can be either
           * a single param or an array list of parameters.
           * @param target (HTMLElement): Target iframe to post the message to.
           */
          function postMessage(method, params, target) {
              if (!target.contentWindow.postMessage) {
                  return false;
              }

              var url = target.getAttribute('src').split('?')[0],
                  data = JSON.stringify({
                      method: method,
                      value: params
                  });

              if (url.substr(0, 2) === '//') {
                  url = window.location.protocol + url;
              }

              target.contentWindow.postMessage(data, url);
          }

          /**
           * Event that fires whenever the window receives a message from its parent
           * via window.postMessage.
           */
          function onMessageReceived(event) {
              var data, method;

              try {
                  data = JSON.parse(event.data);
                  method = data.event || data.method;
              }
              catch(e)  {
                  //fail silently... like a ninja!
              }

              if (method == 'ready' &amp;&amp; !isReady) {
                  isReady = true;
              }

              // Handles messages from moogaloop only
              if (event.origin != playerDomain) {
                  return false;
              }

              var value = data.value,
                  eventData = data.data,
                  target_id = target_id === '' ? null : data.player_id,

                  callback = getCallback(method, target_id),
                  params = [];

              if (!callback) {
                  return false;
              }

              if (value !== undefined) {
                  params.push(value);
              }

              if (eventData) {
                  params.push(eventData);
              }

              if (target_id) {
                  params.push(target_id);
              }

              return params.length &gt; 0 ? callback.apply(null, params) : callback.call();
          }


          /**
           * Stores submitted callbacks for each iframe being tracked and each
           * event for that iframe.
           *
           * @param eventName (String): Name of the event. Eg. api_onPlay
           * @param callback (Function): Function that should get executed when the
           * event is fired.
           * @param target_id (String) [Optional]: If handling more than one iframe then
           * it stores the different callbacks for different iframes based on the iframe's
           * id.
           */
          function storeCallback(eventName, callback, target_id) {
              if (target_id) {
                  if (!eventCallbacks[target_id]) {
                      eventCallbacks[target_id] = {};
                  }
                  eventCallbacks[target_id][eventName] = callback;
              }
              else {
                  eventCallbacks[eventName] = callback;
              }
          }

          /**
           * Retrieves stored callbacks.
           */
          function getCallback(eventName, target_id) {
              if (target_id) {
                  return eventCallbacks[target_id][eventName];
              }
              else {
                  return eventCallbacks[eventName];
              }
          }

          function removeCallback(eventName, target_id) {
              if (target_id &amp;&amp; eventCallbacks[target_id]) {
                  if (!eventCallbacks[target_id][eventName]) {
                      return false;
                  }
                  eventCallbacks[target_id][eventName] = null;
              }
              else {
                  if (!eventCallbacks[eventName]) {
                      return false;
                  }
                  eventCallbacks[eventName] = null;
              }

              return true;
          }

          /**
           * Returns a domain's root domain.
           * Eg. returns http://vimeo.com when http://vimeo.com/channels is sbumitted
           *
           * @param url (String): Url to test against.
           * @return url (String): Root domain of submitted url
           */
          function getDomainFromUrl(url) {
              if (url.substr(0, 2) === '//') {
                  url = window.location.protocol + url;
              }

              var url_pieces = url.split('/'),
                  domain_str = '';

              for(var i = 0, length = url_pieces.length; i &lt; length; i++) {
                  if(i&lt;3) {domain_str += url_pieces[i];}
                  else {break;}
                  if(i&lt;2) {domain_str += '/';}
              }

              return domain_str;
          }

          function isFunction(obj) {
              return !!(obj &amp;&amp; obj.constructor &amp;&amp; obj.call &amp;&amp; obj.apply);
          }

          function isArray(obj) {
              return toString.call(obj) === '[object Array]';
          }

          // Give the init function the Froogaloop prototype for later instantiation
          Froogaloop.fn.init.prototype = Froogaloop.fn;

          // Listens for the message event.
          // W3C
          if (window.addEventListener) {
              window.addEventListener('message', onMessageReceived, false);
          }
          // IE
          else {
              window.attachEvent('onmessage', onMessageReceived);
          }

          // Expose froogaloop to the global object
          return (window.Froogaloop = window.$f = Froogaloop);

      })();



      ////////////////////////////////////////
      // Our Script
      ////////////////////////////////////////
      $(document).ready(function(){
        // Initiate FitVid.js
        $(&quot;.gwcc-video-container&quot;).fitVids();

        // Iframe/player variables
        var iframe = $('#video')[0];
        var player = $f(iframe);

        // Open on play
        $('.gwcc_play').click(function(){
          $('.gwcc_video_overlay').css('left', 0)
          $('.gwcc_video_overlay').addClass('gwcc_show')
          player.api(&quot;play&quot;);
        })

        // Closes on click outside
        $('.gwcc_video_overlay').click(function(){
          $('.gwcc_video_overlay').removeClass('gwcc_show')
          setTimeout(function() {
            $('.gwcc_video_overlay').css('left', '-100%')
          }, 300);
          player.api(&quot;pause&quot;);
        })
      });

    &lt;/script&gt;</content><author><name></name></author><summary type="html">+ Play</summary></entry><entry><title type="html">GWCC Youth to unveil photo + film exhibit, Life + Times</title><link href="http://localhost:4000/highlights/gwcc-youth-exhibit/" rel="alternate" type="text/html" title="GWCC Youth to unveil photo + film exhibit, Life + Times" /><published>2018-01-20T00:00:00-05:00</published><updated>2018-01-20T00:00:00-05:00</updated><id>http://localhost:4000/highlights/gwcc-youth-exhibit</id><content type="html" xml:base="http://localhost:4000/highlights/gwcc-youth-exhibit/">&lt;div class=&quot;highlight_video discover_overlay&quot; style=&quot;background-image:url('/assets/img/highlights_photoexhibit.jpg');&quot;&gt;
    &lt;div class=&quot;frow centered&quot;&gt;
        &lt;div&gt;

            &lt;!-- Vimeo onClick --&gt;
            &lt;div class=&quot;gwcc_video_overlay&quot;&gt;
                &lt;div class=&quot;gwcc-video-container&quot;&gt;

                    &lt;!-- SVG Close (X) Icon --&gt;
                    &lt;svg class=&quot;gwcc_close&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;39.2 22.3 25 24.5&quot;&gt;&lt;path d=&quot;M39.5,46.4c0.2,0.2,0.6,0.4,0.9,0.4c0.3,0,0.6-0.1,0.9-0.4l10.3-10.3L62,46.4c0.2,0.2,0.6,0.4,0.9,0.4c0.3,0,0.6-0.1,0.9-0.4c0.5-0.5,0.5-1.3,0-1.8L53.5,34.3l9.8-9.8c0.5-0.5,0.5-1.3,0-1.8c-0.5-0.5-1.3-0.5-1.8,0l-9.8,9.8l-9.8-9.8c-0.5-0.5-1.3-0.5-1.8,0c-0.5,0.5-0.5,1.3,0,1.8l9.8,9.8L39.5,44.6C39,45.1,39,45.9,39.5,46.4z&quot; /&gt;&lt;/svg&gt;


                    &lt;!-- Embedded video --&gt;
                    &lt;iframe id=&quot;video&quot; src=&quot;https://player.vimeo.com/video/242342417?api=1&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            &lt;div class=&quot;gwcc_video_player&quot;&gt;
                &lt;div&gt;
                    &lt;span class=&quot;gwcc_play&quot;&gt;+ Play&lt;/span&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;!-- &lt;div class=&quot;bronzey_alpha&quot;&gt;
                Peek Inside GWCC
            &lt;/div&gt; --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
      // Scroll to the very bottom to see the stuff we wrote, the big giant blocks are:
      // froogaloop
      // and
      // fitvid.js

      ;(function( $ ){

        'use strict';

        $.fn.fitVids = function( options ) {
          var settings = {
            customSelector: null,
            ignore: null
          };

          if(!document.getElementById('fit-vids-style')) {
            // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
            var head = document.head || document.getElementsByTagName('head')[0];
            var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
            var div = document.createElement(&quot;div&quot;);
            div.innerHTML = '&lt;p&gt;x&lt;/p&gt;&lt;style id=&quot;fit-vids-style&quot;&gt;' + css + '&lt;/style&gt;';
            head.appendChild(div.childNodes[1]);
          }

          if ( options ) {
            $.extend( settings, options );
          }

          return this.each(function(){
            var selectors = [
              'iframe[src*=&quot;player.vimeo.com&quot;]',
              'iframe[src*=&quot;youtube.com&quot;]',
              'iframe[src*=&quot;youtube-nocookie.com&quot;]',
              'iframe[src*=&quot;kickstarter.com&quot;][src*=&quot;video.html&quot;]',
              'object',
              'embed'
            ];

            if (settings.customSelector) {
              selectors.push(settings.customSelector);
            }

            var ignoreList = '.fitvidsignore';

            if(settings.ignore) {
              ignoreList = ignoreList + ', ' + settings.ignore;
            }

            var $allVideos = $(this).find(selectors.join(','));
            $allVideos = $allVideos.not('object object'); // SwfObj conflict patch
            $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.

            $allVideos.each(function(count){
              var $this = $(this);
              if($this.parents(ignoreList).length &gt; 0) {
                return; // Disable FitVids on this video.
              }
              if (this.tagName.toLowerCase() === 'embed' &amp;&amp; $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }
              if ((!$this.css('height') &amp;&amp; !$this.css('width')) &amp;&amp; (isNaN($this.attr('height')) || isNaN($this.attr('width'))))
              {
                $this.attr('height', 9);
                $this.attr('width', 16);
              }
              var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') &amp;&amp; !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),
                  width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
                  aspectRatio = height / width;
              if(!$this.attr('id')){
                var videoID = 'fitvid' + count;
                $this.attr('id', videoID);
              }
              $this.wrap('&lt;div class=&quot;fluid-width-video-wrapper&quot;&gt;&lt;/div&gt;').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');
              $this.removeAttr('height').removeAttr('width');
            });
          });
        };
      // Works with either jQuery or Zepto
      })( window.jQuery || window.Zepto );

      // Init style shamelessly stolen from jQuery http://jquery.com
      var Froogaloop = (function(){
          // Define a local copy of Froogaloop
          function Froogaloop(iframe) {
              // The Froogaloop object is actually just the init constructor
              return new Froogaloop.fn.init(iframe);
          }

          var eventCallbacks = {},
              hasWindowEvent = false,
              isReady = false,
              slice = Array.prototype.slice,
              playerDomain = '';

          Froogaloop.fn = Froogaloop.prototype = {
              element: null,

              init: function(iframe) {
                  if (typeof iframe === &quot;string&quot;) {
                      iframe = document.getElementById(iframe);
                  }

                  this.element = iframe;

                  // Register message event listeners
                  playerDomain = getDomainFromUrl(this.element.getAttribute('src'));

                  return this;
              },

              /*
               * Calls a function to act upon the player.
               *
               * @param {string} method The name of the Javascript API method to call. Eg: 'play'.
               * @param {Array|Function} valueOrCallback params Array of parameters to pass when calling an API method
               *                                or callback function when the method returns a value.
               */
              api: function(method, valueOrCallback) {
                  if (!this.element || !method) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null,
                      params = !isFunction(valueOrCallback) ? valueOrCallback : null,
                      callback = isFunction(valueOrCallback) ? valueOrCallback : null;

                  // Store the callback for get functions
                  if (callback) {
                      storeCallback(method, callback, target_id);
                  }

                  postMessage(method, params, element);
                  return self;
              },

              /*
               * Registers an event listener and a callback function that gets called when the event fires.
               *
               * @param eventName (String): Name of the event to listen for.
               * @param callback (Function): Function that should be called when the event fires.
               */
              addEvent: function(eventName, callback) {
                  if (!this.element) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null;


                  storeCallback(eventName, callback, target_id);

                  // The ready event is not registered via postMessage. It fires regardless.
                  if (eventName != 'ready') {
                      postMessage('addEventListener', eventName, element);
                  }
                  else if (eventName == 'ready' &amp;&amp; isReady) {
                      callback.call(null, target_id);
                  }

                  return self;
              },

              /*
               * Unregisters an event listener that gets called when the event fires.
               *
               * @param eventName (String): Name of the event to stop listening for.
               */
              removeEvent: function(eventName) {
                  if (!this.element) {
                      return false;
                  }

                  var self = this,
                      element = self.element,
                      target_id = element.id !== '' ? element.id : null,
                      removed = removeCallback(eventName, target_id);

                  // The ready event is not registered
                  if (eventName != 'ready' &amp;&amp; removed) {
                      postMessage('removeEventListener', eventName, element);
                  }
              }
          };

          /**
           * Handles posting a message to the parent window.
           *
           * @param method (String): name of the method to call inside the player. For api calls
           * this is the name of the api method (api_play or api_pause) while for events this method
           * is api_addEventListener.
           * @param params (Object or Array): List of parameters to submit to the method. Can be either
           * a single param or an array list of parameters.
           * @param target (HTMLElement): Target iframe to post the message to.
           */
          function postMessage(method, params, target) {
              if (!target.contentWindow.postMessage) {
                  return false;
              }

              var url = target.getAttribute('src').split('?')[0],
                  data = JSON.stringify({
                      method: method,
                      value: params
                  });

              if (url.substr(0, 2) === '//') {
                  url = window.location.protocol + url;
              }

              target.contentWindow.postMessage(data, url);
          }

          /**
           * Event that fires whenever the window receives a message from its parent
           * via window.postMessage.
           */
          function onMessageReceived(event) {
              var data, method;

              try {
                  data = JSON.parse(event.data);
                  method = data.event || data.method;
              }
              catch(e)  {
                  //fail silently... like a ninja!
              }

              if (method == 'ready' &amp;&amp; !isReady) {
                  isReady = true;
              }

              // Handles messages from moogaloop only
              if (event.origin != playerDomain) {
                  return false;
              }

              var value = data.value,
                  eventData = data.data,
                  target_id = target_id === '' ? null : data.player_id,

                  callback = getCallback(method, target_id),
                  params = [];

              if (!callback) {
                  return false;
              }

              if (value !== undefined) {
                  params.push(value);
              }

              if (eventData) {
                  params.push(eventData);
              }

              if (target_id) {
                  params.push(target_id);
              }

              return params.length &gt; 0 ? callback.apply(null, params) : callback.call();
          }


          /**
           * Stores submitted callbacks for each iframe being tracked and each
           * event for that iframe.
           *
           * @param eventName (String): Name of the event. Eg. api_onPlay
           * @param callback (Function): Function that should get executed when the
           * event is fired.
           * @param target_id (String) [Optional]: If handling more than one iframe then
           * it stores the different callbacks for different iframes based on the iframe's
           * id.
           */
          function storeCallback(eventName, callback, target_id) {
              if (target_id) {
                  if (!eventCallbacks[target_id]) {
                      eventCallbacks[target_id] = {};
                  }
                  eventCallbacks[target_id][eventName] = callback;
              }
              else {
                  eventCallbacks[eventName] = callback;
              }
          }

          /**
           * Retrieves stored callbacks.
           */
          function getCallback(eventName, target_id) {
              if (target_id) {
                  return eventCallbacks[target_id][eventName];
              }
              else {
                  return eventCallbacks[eventName];
              }
          }

          function removeCallback(eventName, target_id) {
              if (target_id &amp;&amp; eventCallbacks[target_id]) {
                  if (!eventCallbacks[target_id][eventName]) {
                      return false;
                  }
                  eventCallbacks[target_id][eventName] = null;
              }
              else {
                  if (!eventCallbacks[eventName]) {
                      return false;
                  }
                  eventCallbacks[eventName] = null;
              }

              return true;
          }

          /**
           * Returns a domain's root domain.
           * Eg. returns http://vimeo.com when http://vimeo.com/channels is sbumitted
           *
           * @param url (String): Url to test against.
           * @return url (String): Root domain of submitted url
           */
          function getDomainFromUrl(url) {
              if (url.substr(0, 2) === '//') {
                  url = window.location.protocol + url;
              }

              var url_pieces = url.split('/'),
                  domain_str = '';

              for(var i = 0, length = url_pieces.length; i &lt; length; i++) {
                  if(i&lt;3) {domain_str += url_pieces[i];}
                  else {break;}
                  if(i&lt;2) {domain_str += '/';}
              }

              return domain_str;
          }

          function isFunction(obj) {
              return !!(obj &amp;&amp; obj.constructor &amp;&amp; obj.call &amp;&amp; obj.apply);
          }

          function isArray(obj) {
              return toString.call(obj) === '[object Array]';
          }

          // Give the init function the Froogaloop prototype for later instantiation
          Froogaloop.fn.init.prototype = Froogaloop.fn;

          // Listens for the message event.
          // W3C
          if (window.addEventListener) {
              window.addEventListener('message', onMessageReceived, false);
          }
          // IE
          else {
              window.attachEvent('onmessage', onMessageReceived);
          }

          // Expose froogaloop to the global object
          return (window.Froogaloop = window.$f = Froogaloop);

      })();



      ////////////////////////////////////////
      // Our Script
      ////////////////////////////////////////
      $(document).ready(function(){
        // Initiate FitVid.js
        $(&quot;.gwcc-video-container&quot;).fitVids();

        // Iframe/player variables
        var iframe = $('#video')[0];
        var player = $f(iframe);

        // Open on play
        $('.gwcc_play').click(function(){
          $('.gwcc_video_overlay').css('left', 0)
          $('.gwcc_video_overlay').addClass('gwcc_show')
          player.api(&quot;play&quot;);
        })

        // Closes on click outside
        $('.gwcc_video_overlay').click(function(){
          $('.gwcc_video_overlay').removeClass('gwcc_show')
          setTimeout(function() {
            $('.gwcc_video_overlay').css('left', '-100%')
          }, 300);
          player.api(&quot;pause&quot;);
        })
      });

    &lt;/script&gt;</content><author><name></name></author><summary type="html">+ Play</summary></entry><entry><title type="html">Pop-Up Shop, Lit Relays, Hello Light City</title><link href="http://localhost:4000/highlights/light-city/" rel="alternate" type="text/html" title="Pop-Up Shop, Lit Relays, Hello Light City" /><published>2018-01-18T00:00:00-05:00</published><updated>2018-01-18T00:00:00-05:00</updated><id>http://localhost:4000/highlights/light-city</id><content type="html" xml:base="http://localhost:4000/highlights/light-city/">&lt;div class=&quot;highlights__slider_bg_img  discover_overlay&quot; style=&quot;background-image:url('/assets/img/gwcc_discover_cover.jpg');&quot;&gt;
    &lt;div class=&quot;frow centered&quot;&gt;
        
        &lt;a class=&quot;brand_cta_v2&quot; href=&quot;http://www.google.com&quot;&gt;&lt;div class=&quot;blue_cta uppercase&quot;&gt;
            + Link
        &lt;/div&gt;&lt;/a&gt;
        
    &lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">+ Link</summary></entry><entry><title type="html">Listen to Around GWCC Podcast #001</title><link href="http://localhost:4000/highlights/around-gwcc-podcast-1/" rel="alternate" type="text/html" title="Listen to Around GWCC Podcast #001" /><published>2018-01-11T00:00:00-05:00</published><updated>2018-01-11T00:00:00-05:00</updated><id>http://localhost:4000/highlights/around-gwcc-podcast-1</id><content type="html" xml:base="http://localhost:4000/highlights/around-gwcc-podcast-1/">&lt;div class=&quot;highlights__slider-wrapper&quot;&gt;
    &lt;div class=&quot;highlights__slider&quot;&gt;
        &lt;div class=&quot;highlights__slider_bg_img  discover_overlay&quot; style=&quot;background-image:url('/assets/img/highlights_podcast.jpg');&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;highlights__slider_bg_img  discover_overlay&quot; style=&quot;background-image:url('/assets/img/history_cover.jpg');&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;highlights__slider_bg_img  discover_overlay&quot; style=&quot;background-image:url('/assets/img/gwcc_discover_volunteer.jpg');&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>